# SOME DESCRIPTIVE TITLE.
# Copyright (C) charles leifer
# This file is distributed under the same license as the peewee package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: peewee 3.13.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-04 10:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../peewee/interactive.rst:4
msgid "Using Peewee Interactively"
msgstr ""

#: ../../peewee/interactive.rst:6
msgid ""
"Peewee contains helpers for working interactively from a Python "
"interpreter or something like a Jupyter notebook. For this example, we'll"
" assume that we have a pre-existing Sqlite database with the following "
"simple schema:"
msgstr ""

#: ../../peewee/interactive.rst:18
msgid ""
"To experiment with querying this database from an interactive interpreter"
" session, we would start our interpreter and import the following "
"helpers:"
msgstr ""

#: ../../peewee/interactive.rst:21
msgid "``peewee.SqliteDatabase`` - to reference the \"events.db\""
msgstr ""

#: ../../peewee/interactive.rst:22
msgid ""
"``playhouse.reflection.generate_models`` - to generate models from an "
"existing database."
msgstr ""

#: ../../peewee/interactive.rst:24
msgid "``playhouse.reflection.print_model`` - to view the model definition."
msgstr ""

#: ../../peewee/interactive.rst:25
msgid "``playhouse.reflection.print_table_sql`` - to view the table SQL."
msgstr ""

#: ../../peewee/interactive.rst:27
msgid "Our terminal session might look like this:"
msgstr ""

#: ../../peewee/interactive.rst:35
msgid ""
"The :py:func:`generate_models` function will introspect the database and "
"generate model classes for all the tables that are found. This is a handy"
" way to get started and can save a lot of typing. The function returns a "
"dictionary keyed by the table name, with the generated model as the "
"corresponding value:"
msgstr ""

#: ../../peewee/interactive.rst:51
msgid ""
"To take a look at the model definition, which lists the model's fields "
"and data-type, we can use the :py:func:`print_model` function:"
msgstr ""

#: ../../peewee/interactive.rst:63
msgid ""
"We can also generate a SQL ``CREATE TABLE`` for the introspected model, "
"if you find that easier to read. This should match the actual table "
"definition in the introspected database:"
msgstr ""

#: ../../peewee/interactive.rst:76
msgid ""
"Now that we are familiar with the structure of the table we're working "
"with, we can run some queries on the generated ``event`` model:"
msgstr ""

#: ../../peewee/interactive.rst:96
msgid ""
"For more information about these APIs and other similar reflection "
"utilities, see the :ref:`reflection` section of the :ref:`playhouse "
"extensions <playhouse>` document."
msgstr ""

#: ../../peewee/interactive.rst:100
msgid ""
"To generate an actual Python module containing model definitions for an "
"existing database, you can use the command-line :ref:`pwiz <pwiz>` tool. "
"Here is a quick example:"
msgstr ""

#: ../../peewee/interactive.rst:108
msgid ""
"The ``events.py`` file will now be an import-able module containing a "
"database instance (referencing the ``events.db``) along with model "
"definitions for any tables found in the database. ``pwiz`` does some "
"additional nice things like introspecting indexes and adding proper flags"
" for ``NULL``/``NOT NULL`` constraints, etc."
msgstr ""

#: ../../peewee/interactive.rst:114
msgid "The APIs discussed in this section:"
msgstr ""

#: ../../peewee/interactive.rst:116
msgid ":py:func:`generate_models`"
msgstr ""

#: ../../peewee/interactive.rst:117
msgid ":py:func:`print_model`"
msgstr ""

#: ../../peewee/interactive.rst:118
msgid ":py:func:`print_table_sql`"
msgstr ""

#: ../../peewee/interactive.rst:120
msgid ""
"More low-level APIs are also available on the :py:class:`Database` "
"instance:"
msgstr ""

#: ../../peewee/interactive.rst:122
msgid ":py:meth:`Database.get_tables`"
msgstr ""

#: ../../peewee/interactive.rst:123
msgid ":py:meth:`Database.get_indexes`"
msgstr ""

#: ../../peewee/interactive.rst:124
msgid ":py:meth:`Database.get_columns` (for a given table)"
msgstr ""

#: ../../peewee/interactive.rst:125
msgid ":py:meth:`Database.get_primary_keys` (for a given table)"
msgstr ""

#: ../../peewee/interactive.rst:126
msgid ":py:meth:`Database.get_foreign_keys` (for a given table)"
msgstr ""

