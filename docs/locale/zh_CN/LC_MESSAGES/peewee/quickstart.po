# SOME DESCRIPTIVE TITLE.
# Copyright (C) charles leifer
# This file is distributed under the same license as the peewee package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: peewee 3.13.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-04 10:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../peewee/quickstart.rst:4
msgid "Quickstart"
msgstr ""

#: ../../peewee/quickstart.rst:6
msgid ""
"This document presents a brief, high-level overview of Peewee's primary "
"features. This guide will cover:"
msgstr ""

#: ../../peewee/quickstart.rst:9
msgid ":ref:`model-definition`"
msgstr ""

#: ../../peewee/quickstart.rst:10
msgid ":ref:`storing-data`"
msgstr ""

#: ../../peewee/quickstart.rst:11
msgid ":ref:`retrieving-data`"
msgstr ""

#: ../../peewee/quickstart.rst:14
msgid ""
"If you'd like something a bit more meaty, there is a thorough tutorial on"
" :ref:`creating a \"twitter\"-style web app <example-app>` using peewee "
"and the Flask framework. In the projects ``examples/`` folder you can "
"find more self-contained Peewee examples, like a `blog app "
"<https://github.com/coleifer/peewee/tree/master/examples/blog>`_."
msgstr ""

#: ../../peewee/quickstart.rst:19
msgid ""
"I **strongly** recommend opening an interactive shell session and running"
" the code. That way you can get a feel for typing in queries."
msgstr ""

#: ../../peewee/quickstart.rst:25
msgid "Model Definition"
msgstr ""

#: ../../peewee/quickstart.rst:27
msgid "Model classes, fields and model instances all map to database concepts:"
msgstr ""

#: ../../peewee/quickstart.rst:30
msgid "Object"
msgstr ""

#: ../../peewee/quickstart.rst:30
msgid "Corresponds to..."
msgstr ""

#: ../../peewee/quickstart.rst:32
msgid "Model class"
msgstr ""

#: ../../peewee/quickstart.rst:32
msgid "Database table"
msgstr ""

#: ../../peewee/quickstart.rst:33
msgid "Field instance"
msgstr ""

#: ../../peewee/quickstart.rst:33
msgid "Column on a table"
msgstr ""

#: ../../peewee/quickstart.rst:34
msgid "Model instance"
msgstr ""

#: ../../peewee/quickstart.rst:34
msgid "Row in a database table"
msgstr ""

#: ../../peewee/quickstart.rst:37
msgid ""
"When starting a project with peewee, it's typically best to begin with "
"your data model, by defining one or more :py:class:`Model` classes:"
msgstr ""

#: ../../peewee/quickstart.rst:54
msgid ""
"Peewee will automatically infer the database table name from the name of "
"the class. You can override the default name by specifying a "
"``table_name`` attribute in the inner \"Meta\" class (alongside the "
"``database`` attribute). To learn more about how Peewee generates table "
"names, refer to the :ref:`table_names` section."
msgstr ""

#: ../../peewee/quickstart.rst:60
msgid ""
"Also note that we named our model ``Person`` instead of ``People``. This "
"is a convention you should follow -- even though the table will contain "
"multiple people, we always name the class using the singular form."
msgstr ""

#: ../../peewee/quickstart.rst:64
msgid ""
"There are lots of :ref:`field types <fields>` suitable for storing "
"various types of data. Peewee handles converting between *pythonic* "
"values those used by the database, so you can use Python types in your "
"code without having to worry."
msgstr ""

#: ../../peewee/quickstart.rst:69
msgid ""
"Things get interesting when we set up relationships between models using "
":ref:`foreign key relationships <relationships>`. This is simple with "
"peewee:"
msgstr ""

#: ../../peewee/quickstart.rst:82
msgid ""
"Now that we have our models, let's connect to the database. Although it's"
" not necessary to open the connection explicitly, it is good practice "
"since it will reveal any errors with your database connection "
"immediately, as opposed to some arbitrary time later when the first query"
" is executed. It is also good to close the connection when you are done "
"-- for instance, a web app might open a connection when it receives a "
"request, and close the connection when it sends the response."
msgstr ""

#: ../../peewee/quickstart.rst:94
msgid ""
"We'll begin by creating the tables in the database that will store our "
"data. This will create the tables with the appropriate columns, indexes, "
"sequences, and foreign key constraints:"
msgstr ""

#: ../../peewee/quickstart.rst:105
msgid "Storing data"
msgstr ""

#: ../../peewee/quickstart.rst:107
msgid ""
"Let's begin by populating the database with some people. We will use the "
":py:meth:`~Model.save` and :py:meth:`~Model.create` methods to add and "
"update people's records."
msgstr ""

#: ../../peewee/quickstart.rst:119
msgid ""
"When you call :py:meth:`~Model.save`, the number of rows modified is "
"returned."
msgstr ""

#: ../../peewee/quickstart.rst:122
msgid ""
"You can also add a person by calling the :py:meth:`~Model.create` method,"
" which returns a model instance:"
msgstr ""

#: ../../peewee/quickstart.rst:130
msgid ""
"To update a row, modify the model instance and call "
":py:meth:`~Model.save` to persist the changes. Here we will change "
"Grandma's name and then save the changes in the database:"
msgstr ""

#: ../../peewee/quickstart.rst:140
msgid ""
"Now we have stored 3 people in the database. Let's give them some pets. "
"Grandma doesn't like animals in the house, so she won't have any, but "
"Herb is an animal lover:"
msgstr ""

#: ../../peewee/quickstart.rst:151
msgid ""
"After a long full life, Mittens sickens and dies. We need to remove him "
"from the database:"
msgstr ""

#: ../../peewee/quickstart.rst:160
msgid ""
"The return value of :py:meth:`~Model.delete_instance` is the number of "
"rows removed from the database."
msgstr ""

#: ../../peewee/quickstart.rst:163
msgid ""
"Uncle Bob decides that too many animals have been dying at Herb's house, "
"so he adopts Fido:"
msgstr ""

#: ../../peewee/quickstart.rst:174
msgid "Retrieving Data"
msgstr ""

#: ../../peewee/quickstart.rst:176
msgid ""
"The real strength of our database is in how it allows us to retrieve data"
" through *queries*. Relational databases are excellent for making ad-hoc "
"queries."
msgstr ""

#: ../../peewee/quickstart.rst:181
msgid "Getting single records"
msgstr ""

#: ../../peewee/quickstart.rst:183
msgid ""
"Let's retrieve Grandma's record from the database. To get a single record"
" from the database, use :py:meth:`Select.get`:"
msgstr ""

#: ../../peewee/quickstart.rst:190
msgid "We can also use the equivalent shorthand :py:meth:`Model.get`:"
msgstr ""

#: ../../peewee/quickstart.rst:197
msgid "Lists of records"
msgstr ""

#: ../../peewee/quickstart.rst:199
msgid "Let's list all the people in the database:"
msgstr ""

#: ../../peewee/quickstart.rst:211
msgid "Let's list all the cats and their owner's name:"
msgstr ""

#: ../../peewee/quickstart.rst:224
msgid ""
"There is a big problem with the previous query: because we are accessing "
"``pet.owner.name`` and we did not select this relation in our original "
"query, peewee will have to perform an additional query to retrieve the "
"pet's owner.  This behavior is referred to as :ref:`N+1 <nplusone>` and "
"it should generally be avoided."
msgstr ""

#: ../../peewee/quickstart.rst:230
msgid ""
"For an in-depth guide to working with relationships and joins, refer to "
"the :ref:`relationships` documentation."
msgstr ""

#: ../../peewee/quickstart.rst:233
msgid ""
"We can avoid the extra queries by selecting both *Pet* and *Person*, and "
"adding a *join*."
msgstr ""

#: ../../peewee/quickstart.rst:250
msgid "Let's get all the pets owned by Bob:"
msgstr ""

#: ../../peewee/quickstart.rst:261
msgid ""
"We can do another cool thing here to get bob's pets. Since we already "
"have an object to represent Bob, we can do this instead:"
msgstr ""

#: ../../peewee/quickstart.rst:270
msgid "Sorting"
msgstr ""

#: ../../peewee/quickstart.rst:272
msgid ""
"Let's make sure these are sorted alphabetically by adding an "
":py:meth:`~Select.order_by` clause:"
msgstr ""

#: ../../peewee/quickstart.rst:284
msgid "Let's list all the people now, youngest to oldest:"
msgstr ""

#: ../../peewee/quickstart.rst:297
msgid "Combining filter expressions"
msgstr ""

#: ../../peewee/quickstart.rst:299
msgid ""
"Peewee supports arbitrarily-nested expressions. Let's get all the people "
"whose birthday was either:"
msgstr ""

#: ../../peewee/quickstart.rst:302
msgid "before 1940 (grandma)"
msgstr ""

#: ../../peewee/quickstart.rst:303
msgid "after 1959 (bob)"
msgstr ""

#: ../../peewee/quickstart.rst:320
msgid "Now let's do the opposite. People whose birthday is between 1940 and 1960:"
msgstr ""

#: ../../peewee/quickstart.rst:335
msgid "Aggregates and Prefetch"
msgstr ""

#: ../../peewee/quickstart.rst:337
msgid "Now let's list all the people *and* how many pets they have:"
msgstr ""

#: ../../peewee/quickstart.rst:349
msgid ""
"Once again we've run into a classic example of :ref:`N+1 <nplusone>` "
"query behavior. In this case, we're executing an additional query for "
"every ``Person`` returned by the original ``SELECT``! We can avoid this "
"by performing a *JOIN* and using a SQL function to aggregate the results."
msgstr ""

#: ../../peewee/quickstart.rst:372
msgid ""
"Peewee provides a magical helper :py:func:`fn`, which can be used to call"
" any SQL function. In the above example, "
"``fn.COUNT(Pet.id).alias('pet_count')`` would be translated into "
"``COUNT(pet.id) AS pet_count``."
msgstr ""

#: ../../peewee/quickstart.rst:376
msgid ""
"Now let's list all the people and the names of all their pets. As you may"
" have guessed, this could easily turn into another :ref:`N+1 <nplusone>` "
"situation if we're not careful."
msgstr ""

#: ../../peewee/quickstart.rst:380
msgid ""
"Before diving into the code, consider how this example is different from "
"the earlier example where we listed all the pets and their owner's name. "
"A pet can only have one owner, so when we performed the join from ``Pet``"
" to ``Person``, there was always going to be a single match. The "
"situation is different when we are joining from ``Person`` to ``Pet`` "
"because a person may have zero pets or they may have several pets. "
"Because we're using a relational databases, if we were to do a join from "
"``Person`` to ``Pet`` then every person with multiple pets would be "
"repeated, once for each pet."
msgstr ""

#: ../../peewee/quickstart.rst:389
msgid "It would look like this:"
msgstr ""

#: ../../peewee/quickstart.rst:411
msgid ""
"Usually this type of duplication is undesirable. To accommodate the more "
"common (and intuitive) workflow of listing a person and attaching **a "
"list** of that person's pets, we can use a special method called "
":py:meth:`~ModelSelect.prefetch`:"
msgstr ""

#: ../../peewee/quickstart.rst:433
msgid "SQL Functions"
msgstr ""

#: ../../peewee/quickstart.rst:435
msgid ""
"One last query. This will use a SQL function to find all people whose "
"names start with either an upper or lower-case *G*:"
msgstr ""

#: ../../peewee/quickstart.rst:447
msgid ""
"This is just the basics! You can make your queries as complex as you "
"like. Check the documentation on :ref:`querying` for more info."
msgstr ""

#: ../../peewee/quickstart.rst:451
msgid "Database"
msgstr ""

#: ../../peewee/quickstart.rst:453
msgid "We're done with our database, let's close the connection:"
msgstr ""

#: ../../peewee/quickstart.rst:459
msgid ""
"In an actual application, there are some established patterns for how you"
" would manage your database connection lifetime. For example, a web "
"application will typically open a connection at start of request, and "
"close the connection after generating the response. A :ref:`connection "
"pool <connection_pooling>` can help eliminate latency associated with "
"startup costs."
msgstr ""

#: ../../peewee/quickstart.rst:465
msgid ""
"To learn about setting up your database, see the :ref:`database` "
"documentation, which provides many examples. Peewee also supports "
":ref:`configuring the database at run-time <deferring_initialization>` as"
" well as setting or changing the database at any time."
msgstr ""

#: ../../peewee/quickstart.rst:470
msgid "Working with existing databases"
msgstr ""

#: ../../peewee/quickstart.rst:472
msgid ""
"If you already have a database, you can autogenerate peewee models using "
":ref:`pwiz`. For instance, if I have a postgresql database named "
"*charles_blog*, I might run:"
msgstr ""

#: ../../peewee/quickstart.rst:481
msgid "What next?"
msgstr ""

#: ../../peewee/quickstart.rst:483
msgid ""
"That's it for the quickstart. If you want to look at a full web-app, "
"check out the :ref:`example-app`."
msgstr ""

